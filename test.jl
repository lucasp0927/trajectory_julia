push!(LOAD_PATH, "./Fields")
using Fields
using MAT
function readfields(filename::AbstractString,variable::AbstractString)
    matfile = matopen(filename)
    if exists(matfile, variable)
#        println("Reading $variable from $filename...")
        var = read(matfile, variable)
    else
        error("Can't read $variable from $filename")
    end
    close(matfile)
    return var
end

function test()
    println("######################################")
    println("2D composite test")
    println("building sf1")
    sf1 = Fields.func2field(ScalarField{Complex{Float64},2},(x,y)->1.0+0im,(3334,6667),(0,0),(15*3333,15*6666))
    println("building sf2")
    sf2 = Fields.func2field(ScalarField{Complex{Float64},2},(x,y)->2.0+0im,(101,101),(299,299),(300,300))
    println("building sf3")
    sf3 = Fields.func2field(ScalarField{Complex{Float64},2},(x,y)->2.0+2im,(101,101),(299,299),(300,300))
    println("building sf4")
    sf4 = Fields.func2field(ScalarField{Complex{Float64},2},(x,y)->2.0+0im,(101,101),(299,299),(300,300))
    println("building vf1")
    vf1 = Fields.func2field(VectorField{Complex{Float64},2},(x,y)->[2.0+0im,2.0+0im,2.0+0im],(101,101),(299,299),(300,300),scaling=t->1.0)
    #########
    sfn1 = Fields.ScalarFieldNode{2}([sf3,sf4],scaling=t->1.0)
    sfn = Fields.ScalarFieldNode{2}([sf1,sf2,vf1,sfn1])
    Profile.init(delay=0.01)    
    @profile Fields.align_field_tree!(sfn)
    println("geometry of sf1")
    println(Fields.geometry(sf1))
    println("geometry of sf2")
    println(Fields.geometry(sf2))
    println("geometry of vf1")
    println(Fields.geometry(vf1))
    println("geometry of sfn")
    println(Fields.geometry(sfn))
    println("geometry of sfn1")
    println(Fields.geometry(sfn1))
    println("composite")
    Fields.composite(sfn,1.0)
end

function main()
    test()
    Profile.clear()    
    test()
    open("profile.bin", "w") do f serialize(f, Profile.retrieve()) end    
    ##########3D test
    println("######################################")
    println("3D align test")
    sf1 = Fields.zero(ScalarField{Float64,3},(1001,1001,11),(0,0,0),(1000,1000,10))
    sf2 = Fields.zero(ScalarField{Float64,3},(101,101,11),(299,299,0),(300,300,10))
    vf1 = Fields.func2field(VectorField{Complex{Float64},3},(x,y,z)->[sin(x)+cos(x)im,1.0im,1.0im],(101,101,11),(299,299,0),(300,300,10),scaling=t->t)
    #########
    println("aligning")
    sfn = Fields.ScalarFieldNode{3}([sf1,sf2,vf1])
    println("geometry of sf1")
    println(Fields.geometry(sf1))
    println("geometry of sf2")
    println(Fields.geometry(sf2))
    println("geometry of vf1")
    println(Fields.geometry(vf1))
    println(mean(vf1.field))
    println("geometry of sfn")
    println(Fields.geometry(sfn))
    println("align sfn")
@time    Fields.align_field_tree!(sfn)
    println("geometry of sf1")
    println(Fields.geometry(sf1))
    println("geometry of sf2")
    println(Fields.geometry(sf2))
    println("geometry of vf1")
    println(Fields.geometry(vf1))
    println(mean(vf1.field))
    println("geometry of sfn")
    println(Fields.geometry(sfn))
end
main()
#@time main()
